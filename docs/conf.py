# type: ignore
# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import re
import sys

from docutils.nodes import Text, Node

# required for autodoc
sys.path.insert(0, os.path.join(os.path.abspath('..'), 'src'))

# -- Project information -----------------------------------------------------

project = 'HABApp'
copyright = '2022, spacemanspiff2007'
author = 'spacemanspiff2007'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = 'beta'
try:
    from HABApp import __version__
    version = __version__
    print(f'Building docs for {version}')
except Exception as e:
    print('Exception', e)
    version = 'dev'

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx_autodoc_typehints',
    'sphinx_exec_code',
    'sphinx.ext.inheritance_diagram',
    'sphinxcontrib.autodoc_pydantic',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}
html_theme_options = {
    'canonical_url': '',
    # 'analytics_id': 'UA-XXXXXXX-1',  # Provided by Google in your dashboard
    'logo_only': False,
    'display_version': True,
    'prev_next_buttons_location': 'bottom',
    'style_external_links': False,
    # 'vcs_pageview_mode': '',
    'style_nav_header_background': '#00b5bf',
    # Toc options
    'collapse_navigation': True,
    'sticky_navigation': True,
    'navigation_depth': 4,
    'includehidden': True,
    'titles_only': False
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']
html_css_files = ['theme_changes.css']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'HABAppdoc'

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'HABApp.tex', 'HABApp Documentation',
     'spacemanspiff2007', 'manual'),
]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'habapp', 'HABApp Documentation',
     [author], 1)
]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'HABApp', 'HABApp Documentation',
     author, 'HABApp', 'One line description of project.',
     'Miscellaneous'),
]

# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']

add_module_names = False
python_use_unqualified_type_names = True

# -- nitpick configuration -------------------------------------------------
nitpick_ignore = [
    ('py:data', 'Ellipsis')
]

nitpick_ignore_regex = [
    (re.compile(r'py:data|py:class'), re.compile(r'typing\..+')),
    (re.compile(r'py:class'), re.compile(r'(?:datetime|pendulum|aiohttp|pathlib)\..+'))
]


# -- Extension configuration -------------------------------------------------
exec_code_working_dir = '../src'
exec_code_source_folders = ['../src', '../tests']

autodoc_member_order = 'bysource'
autoclass_content = 'class'


# No config on member
autodoc_pydantic_model_show_config_member = False
autodoc_pydantic_model_show_config_summary = False

# No validators
autodoc_pydantic_model_show_validator_summary = False
autodoc_pydantic_model_show_validator_members = False

autodoc_pydantic_model_signature_prefix = 'settings'
autodoc_pydantic_model_show_json = False
autodoc_pydantic_model_show_field_summary = False

# Field config
autodoc_pydantic_field_show_alias = False
autodoc_pydantic_field_list_validators = False
autodoc_pydantic_field_swap_name_and_alias = True




# ----------------------------------------------------------------------------------------------------------------------
# Post processing of default value

regex_path = re.compile(r"^\w+Path\('([^']+)'\)")
assert regex_path.search('WindowsPath(\'lib\')').group(1) == 'lib'


def replace_node_contents(node: Node):
    """Find nodes with given `tag_matches` and `text_matches`. Recursively
    iterate children nodes.

    """

    matched_nodes = []

    # iterate children
    for child in node.children:
        child_matches = replace_node_contents(node=child)
        matched_nodes.extend(child_matches)

    # handle node itself
    parent: Node = node.parent
    node_text: str = node.astext()

    replacement = None

    # Replace default value
    # WindowsPath('config') -> 'config'
    if node_text.endswith(')') and (m := regex_path.search(node_text)) is not None:
        replacement = Text(f"'{m.group(1)}'")

    # # Type hints
    # tag_matches = {"pending_xref", "pending_xref_condition"}
    # text_matches = {'Path', 'pathlib.Path'}
    # is_pending_xref = node.tagname in tag_matches
    # if is_pending_xref and child_text and node_text in text_matches:
    #     matched_nodes.append(node)

    # put replacement in place
    if replacement is not None:
        replacement.parent = parent
        pos = parent.children.index(node)
        parent.children[pos] = replacement

    return matched_nodes


def transform_desc(app, domain, objtype: str, contentnode):
    if objtype != 'pydantic_field':
        return None

    replace_node_contents(node=contentnode.parent)


def setup(app):
    app.connect('object-description-transform', transform_desc)
